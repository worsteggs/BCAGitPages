"use strict";(self["webpackChunkbrain_web"]=self["webpackChunkbrain_web"]||[]).push([[441],{1441:function(e,t,a){a.r(t),a.d(t,{default:function(){return c}});var l=function(){var e=this,t=e._self._c;return t("div",{staticClass:"xuanzeClick filter-cell"},[t("div",{staticStyle:{display:"flex"}},[t("el-checkbox",{staticClass:"filter-check-txt",model:{value:e.params.notFlag,callback:function(t){e.$set(e.params,"notFlag",t)},expression:"params.notFlag"}},[e._v(" Exclude ")]),t("div",[t("div",{staticStyle:{"margin-top":"8px"}},[t("span",{staticClass:"filter-cell-label"},[e._v("Region ")]),t("el-select",{staticStyle:{width:"187px"},attrs:{clearable:"",placeholder:"Region"},on:{change:e.regionChange},model:{value:e.params.region,callback:function(t){e.$set(e.params,"region",t)},expression:"params.region"}},e._l(e.orginRegion,(function(e){return t("el-option",{key:e.key,attrs:{label:e.label,value:e.label}})})),1)],1),t("div",{staticStyle:{"margin-top":"8px"}},[t("span",{staticClass:"filter-cell-label"},[e._v("Subregion ")]),t("el-select",{staticStyle:{width:"187px"},attrs:{clearable:"",placeholder:"Subregion"},on:{change:t=>e.params.subregion=t},model:{value:e.subregion,callback:function(t){e.subregion=t},expression:"subregion"}},e._l(e.orginSubregion,(function(e){return t("el-option",{key:e.key,attrs:{label:e.label,value:e.label}})})),1)],1)])],1),t("filterIcon",{attrs:{questionTip:"Select cells from one or several organs"},on:{close:function(t){return e.$emit("close")}}})],1)},n=[],i={props:{params:{type:Object,default:function(){return{organ:["Brain"],notFlag:!1}}},disabled:{type:Boolean,default:!1}},components:{filterIcon:()=>a.e(357).then(a.bind(a,7357))},data(){return{zNodes:[],defaultCheckedKeys:[],filterText:"",cellCheck:!0,cellStrictly:!1,orginNodes:[],orginRegion:[],orginSubregion:[],region:"",subregion:"",regionParent:{}}},watch:{},async created(){const e=await this.$store.dispatch("cellCollection/fetchOrgantree","Brain");console.log("000000000",e),this.orginRegion=e.map((e=>({label:e,value:e})))},mounted(){this.params.organ=["Brain"],this.subregion=this.params.subregion},methods:{async regionChange(e){this.subregion="",this.params.subregion="";const t=await this.$store.dispatch("cellCollection/fetchOrgantree",e);this.orginSubregion=t.map((e=>({label:e,value:e})))}}},r=i,o=a(4249),s=(0,o.Z)(r,l,n,!1,null,null,null),c=s.exports}}]);